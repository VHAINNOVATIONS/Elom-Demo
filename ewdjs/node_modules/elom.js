var getLabDefault = function(params, ewd) {
  console.log("lab id = " + params.filter);

  var labIndex = new ewd.mumps.GlobalNode("LAB", [60,params.filter,3,1]);
  labIndex = labIndex.$(labIndex._first);
  var results = [];

  var id = "collectSample";
  var labDefault = "";
  var rec = labIndex._value;
  if (rec) {
    var record = rec.split('^');
    labDefault = record[2];
  }
  console.log("collectSampleDefault = " + labDefault);
  results.push({
        id: id, 
        text: labDefault
        });
  
  id = "specimen";
  labDefault = "";
  rec = labIndex._value;
  if (rec) {
    var record = rec.split('^');
    labDefault = record[1];
  }
  console.log("specimenDefault = " + labDefault);
  results.push({
        id: id, 
        text: labDefault
        });

  id = "urgency";
  labDefault = "";
  rec = labIndex._value;
  if (rec) {
    var record = rec.split('^');
    labDefault = record[0];
  }
  console.log("urgencyDefault = " + labDefault);
  results.push({
        id: id, 
        text: labDefault
        });

  return {
    results: results,
    };
};

var getGWI = function(params, ewd) {
  console.log(params.filter);
  var labIndex = new ewd.mumps.GlobalNode("LAB", [60,params.filter,6]);

  var results = [];
  var namesById = {};
  var j = 0;
  var rec = "";
  var record = "";
  var labName = "";
  var id = 0;

//iterate through the child nodes
  labIndex._forEach(function(subscript, subNode) {
 //   j++;
    // subscript = next subscript found under the patient GlobalNode
    // subNode = GlobalNode object representing the sub-node with the returned subscript

// get the child of the sub node and get the first value
    var newNode=subNode.$(subNode._first);
    rec = newNode._value; 
    record = "";
    urg = "";
    if(rec){
      record = rec.split('^');
      urg = record[0];
// match the index
      
        console.log("general ward instructions = " + urg);
        results.push({
        id: subscript, 
        text: urg
        });
        namesById[id] = urg;
      };
        
  });
console.log("j= " +j);
 return {
    results: results,
    namesById: namesById
  };
};

var getCollectSample = function(ewd) {
  var labIndex = new ewd.mumps.GlobalNode("LAB", [62]);
  labIndex = labIndex.$('C');
  //console.log(JSON.stringify(labIndex._getDocument(), null, 3));

  var results = [];
  var namesById = {};
  var j = 0;
 // var i = 0;
  var rec = "";
  var record = "";
  var labName = "";
  var id = 0;

//iterate through the child nodes
  labIndex._forEach(function(subscript, subNode) {
  //console.log("subscript=" + subscript);
      urg = subscript;
        console.log("collectSample = " + urg);
        results.push({
        id: subscript, 
        text: urg
        });
        namesById[id] = urg;
        
  });
console.log("j= " +j);
 return {
    results: results,
    namesById: namesById
  };
};

var getSpecimen = function(ewd) {
  var labIndex = new ewd.mumps.GlobalNode("LAB", [62]);
  labIndex = labIndex.$('B');
  //console.log(JSON.stringify(labIndex._getDocument(), null, 3));

  var results = [];
  var namesById = {};
  var j = 0;
 // var i = 0;
  var rec = "";
  var record = "";
  var labName = "";
  var id = 0;

//iterate through the child nodes
  labIndex._forEach(function(subscript, subNode) {
  //console.log("subscript=" + subscript);
      urg = subscript;
        console.log("collectSample = " + urg);
        results.push({
        id: subscript, 
        text: urg
        });
        namesById[id] = urg;
        
  });
console.log("j= " +j);
 return {
    results: results,
    namesById: namesById
  };
};


var getProvidersByName = function(prefix, max, ewd) {
  console.log('Query=VA[200]');
  var labIndex = new ewd.mumps.GlobalNode("VA", [200]);
  var results = [];
  var namesById = {};
  var i = 0;
  var j = 0;
  var rec = "";
  var record = "";
  var labName = "";
  var id = 0;

//iterate through the child nodes
  labIndex._forEach(function(subscript, subNode) {
    j++;
    // subscript = next subscript found under the patient GlobalNode
    // subNode = GlobalNode object representing the sub-node with the returned subscript

// get the child of the sub node and get the first value
    var newNode=subNode.$(subNode._first);
    rec = newNode._value;
    record = "";
    labName = "";
    if(rec){
      record = rec.split('^');
      labName = record[0];
// match the index
      var idx = labName.toUpperCase().indexOf(prefix.toUpperCase());
      if (idx == 0){
        console.log("providername = " + labName);
        results.push({
        id: subscript, 
        text: labName
        });
        namesById[id] = labName;
        i++;
        if (i > max) return true;
      };
    };     
  });
console.log("j= " +j);
 return {
    results: results,
    namesById: namesById
  };
};

var getUrgency = function(ewd) {
  var labIndex = new ewd.mumps.GlobalNode("LAB", [62.05]);
  var results = [];
  var namesById = {};
  var j = 0;
 // var i = 0;
  var rec = "";
  var record = "";
  var labName = "";
  var id = 0;

//iterate through the child nodes
  labIndex._forEach(function(subscript, subNode) {
 //   j++;
    // subscript = next subscript found under the patient GlobalNode
    // subNode = GlobalNode object representing the sub-node with the returned subscript

// get the child of the sub node and get the first value
    var newNode=subNode.$(subNode._first);
    rec = newNode._value; 
    record = "";
    urg = "";
    if(rec){
      record = rec.split('^');
      urg = record[0];
// match the index
      
        console.log("urgency = " + urg);
        results.push({
        id: subscript, 
        text: urg
        });
        namesById[id] = urg;
//        i++;
//        if (i > max) return true;
      };
        
  });
console.log("j= " +j);
 return {
    results: results,
    namesById: namesById
  };
};

var writeLabOrder = function(params, ewd){
    //If No Lab Orders exist - write subnode "1"    
    //If Lab Orders do exist - append a new node - 
    //get last subnode; increment; create new subnode; write ; 
  var results=[];
  var subScript = 1;
  var labOrderNode = new ewd.mumps.GlobalNode("%zzLPRIOR",[9999,params.id,"LabOrder"]);
  if (labOrderNode._hasProperties) {
    subScript=labOrderNode._last;
    subScript++
  }
  newNode = labOrderNode.$(subScript);
  newNode._setDocument(params, true);
  results.push({
        id: "200", 
        text: "success"
        });
    return{results: results};
};

var getLabsByName = function(prefix, max, ewd) {
  var labIndex = new ewd.mumps.GlobalNode("LAB", [60]);
  var results = [];
  var namesById = {};
  var i = 0;
  var j = 0;
  var rec = "";
  var record = "";
  var labName = "";
  var id = 0;

//iterate through the child nodes
  labIndex._forEach(function(subscript, subNode) {
    j++;
    // subscript = next subscript found under the patient GlobalNode
    // subNode = GlobalNode object representing the sub-node with the returned subscript

// get the child of the sub node and get the first value
    var newNode=subNode.$(subNode._first);
    rec = newNode._value; 
    record = "";
    labName = "";
    if(rec){
      record = rec.split('^');
      labName = record[0];
// match the index
      var idx = labName.toUpperCase().indexOf(prefix.toUpperCase());
      if (idx == 0){
//        console.log("labname = " + labName);
        results.push({
        id: subscript, 
        text: labName
        });
        namesById[id] = labName;
        i++;
        if (i > max) return true;
      };
    };     
  });
console.log("j= " +j);
 return {
    results: results,
    namesById: namesById
  };
};


module.exports = {
  onMessage: {
    
    labQuery: function(params, ewd) {
 //     if (ewd.session.isAuthenticated) {
        console.log("************elom.labQuery()********************");
        // ********************************
        // var results = getPatientsByName(params.prefix, 40, ewd);
//        var results = getLabsByName(params.prefix, 40, ewd);
        var results = getLabsByName(params.filter, 40, ewd);
        // ********************************

        ewd.session.$('names')._delete();
        ewd.session.$('names')._setDocument(results.namesById);
        ewd.sendWebSocketMsg({
          type: 'labMatches',
          message: results.results
        });
     },

    saveLabOrder: function(params, ewd){
        console.log("************elom.saveLabOrder()********************");
         var results = writeLabOrder(params, ewd);
        ewd.sendWebSocketMsg({
          type: 'labOrderSaved',
          message: results.text
        });
    },
 
    collectSampleQuery: function(params, ewd) {
        console.log("************elom.collectSampleQuery()********************");
        var results = getCollectSample(ewd);
        ewd.sendWebSocketMsg({
          type: 'collectSampleMatches',
          message: results.results
        });
     },

   specimenQuery: function(params, ewd) {
        console.log("************elom.specimenQuery()********************");
        var results = getSpecimen(ewd);
        ewd.sendWebSocketMsg({
          type: 'specimenMatches',
          message: results.results
        });
     },


    urgencyQuery: function(params, ewd) {
        console.log("************elom.urgencyQuery()********************");
        var results = getUrgency(ewd);
        ewd.sendWebSocketMsg({
          type: 'urgencyMatches',
          message: results.results
        });

     },
    providerQuery: function(params, ewd) {
        console.log("************elom.providerQuery()********************");
        var results = getProvidersByName(params.filter, 40, ewd);
        ewd.sendWebSocketMsg({
          type: 'providerMatches',
          message: results.results
        });

     },

     gwiQuery: function(params, ewd) {
        console.log("*************elom.gwiQuery()********************");
        var results = getGWI(params,ewd);
        ewd.sendWebSocketMsg({
          type: 'gwiMatches',
          message: results.results
        });
     },

    labDefaultQuery: function(params, ewd) {
        console.log("*************elom.labDefaultQuery()********************");
        var results = getLabDefault(params,ewd);
        ewd.sendWebSocketMsg({
          type: 'labDefaultMatches',
          message: results.results
        });

     },

    patientQuery: function(params, ewd) {
        console.log("************elom.patientQuery()********************");
        var results = "Provider List";
        ewd.sendWebSocketMsg({
          type: 'patientMatches',
          message: results.results
        });
     }
  }
};
